// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Product = sequelize.define('product', {
    eanCode: {
      type: DataTypes.STRING,
    },
    name: {
      type: DataTypes.STRING,
    },
    description: {
      type: DataTypes.STRING,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'product',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Product.associate = (models) => {
    Product.belongsTo(models.gs1Prefix, {
      foreignKey: {
        name: 'gs1PrefixIdKey',
        field: 'gs1_prefix_id',
      },
      as: 'gs1Prefix',
    });
    Product.belongsToMany(models.buyableUser, {
      through: 'favoriteProducts',
      foreignKey: 'product_id',
      otherKey: 'user_id',
    });
    Product.hasMany(models.userVerification, {
      foreignKey: {
        name: 'productIdKey',
        field: 'product_id',
      },
      as: 'userVerifications',
    });
    Product.hasMany(models.productVerification, {
      foreignKey: {
        name: 'productIdKey',
        field: 'product_id',
      },
      as: 'productVerifications',
    });
    Product.hasMany(models.downloadedData, {
      foreignKey: {
        name: 'productIdKey',
        field: 'product_id',
      },
      as: 'downloadedData',
    });
    Product.hasMany(models.productImage, {
      foreignKey: {
        name: 'productIdKey',
        field: 'product_id',
      },
      as: 'productImages',
    });
  };

  return Product;
};
